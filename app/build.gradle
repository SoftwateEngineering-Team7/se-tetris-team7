/*
 * This file was generated by the Gradle 'init' task.
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/9.0.0/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.1.0'
    id 'jacoco'
}

ext {
    // OS/아키텍처에 맞는 JavaFX 분류 문자열 계산 (win, win-aarch64, mac, mac-aarch64, linux, linux-aarch64)
    def os   = System.getProperty('os.name').toLowerCase()
    def arch = System.getProperty('os.arch').toLowerCase()
    javafxPlatform =
        os.contains('win') ? ((arch.contains('aarch64') || arch.contains('arm')) ? 'win-aarch64' : 'win') :
        os.contains('mac') ? ((arch.contains('aarch64') || arch.contains('arm')) ? 'mac-aarch64' : 'mac') :
        ((arch.contains('aarch64') || arch.contains('arm')) ? 'linux-aarch64' : 'linux')
}

repositories {
    mavenCentral()
}

dependencies {
    // App deps
    implementation libs.guava
    implementation "org.openjfx:javafx-controls:21"
    implementation "org.openjfx:javafx-fxml:21"

    // OS별 JavaFX 네이티브
    runtimeOnly "org.openjfx:javafx-graphics:21:${javafxPlatform}"
    runtimeOnly "org.openjfx:javafx-controls:21:${javafxPlatform}"
    runtimeOnly "org.openjfx:javafx-fxml:21:${javafxPlatform}"
    runtimeOnly "org.openjfx:javafx-base:21:${javafxPlatform}"

    // --- Test deps ---
    testImplementation libs.junit.jupiter.api
    testRuntimeOnly libs.junit.jupiter.engine
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.10.3'
    testImplementation libs.mockito.core
    testImplementation libs.mockito.junit.jupiter
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    mainClass = 'org.example.App'
}

javafx {
    version = '21'
    modules = [ 'javafx.controls', 'javafx.fxml' ]
}

jacoco {
    toolVersion = "0.8.11"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        csv.required = true
        html.required = true
    }
    classDirectories.setFrom(files(classDirectories.files.collect {
        fileTree(dir: it, exclude: [
        ])
    }))
}

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    violationRules {
        rule {
            limit {
                minimum = 0.6
            }
        }
    }
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}
