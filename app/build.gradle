/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/9.0.0/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.1.0'
    id 'jacoco' // 테스트 커버리지 측정
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // This dependency is used by the application.
    implementation libs.guava

    // JavaFX dependencies
    implementation "org.openjfx:javafx-controls:21"
    implementation "org.openjfx:javafx-fxml:21"

    // Provide OS-specific JavaFX native runtime
    runtimeOnly "org.openjfx:javafx-graphics:21:${System.getProperty('os.name').toLowerCase().contains('win') ? 'win' : 'linux'}"
    runtimeOnly "org.openjfx:javafx-controls:21:${System.getProperty('os.name').toLowerCase().contains('win') ? 'win' : 'linux'}"
    runtimeOnly "org.openjfx:javafx-fxml:21:${System.getProperty('os.name').toLowerCase().contains('win') ? 'win' : 'linux'}"
    runtimeOnly "org.openjfx:javafx-base:21:${System.getProperty('os.name').toLowerCase().contains('win') ? 'win' : 'linux'}"


    // --- Test Dependencies ---
    // JUnit 5 Jupiter (the new standard for JUnit)
    testImplementation libs.junit.jupiter.api
    testRuntimeOnly libs.junit.jupiter.engine
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.10.3'

    // Mockito for creating mock objects in tests
    testImplementation libs.mockito.core
    testImplementation libs.mockito.junit.jupiter // Integrates Mockito with JUnit 5
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'org.example.App'
}

javafx {
    // Use JavaFX 21 (LTS) to match the JDK 21 toolchain
    version = '21'
    modules = [ 'javafx.controls', 'javafx.fxml' ]
}

// JaCoCo test coverage configuration
jacoco {
    toolVersion = "0.8.11"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        csv.required = true
        html.required = true
    }
    classDirectories.setFrom(files(classDirectories.files.collect {
        fileTree(dir: it, exclude: [
            // Exclude main application class and UI views from coverage report
            'org/tetris/App.class',
            'org/tetris/menu/start/view/**'
        ])
    }))
}

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    violationRules {
        rule {
            limit {
                // Set the required coverage ratio
                minimum = 0.6
            }
        }
    }
}

test {
    // Use JUnit Platform for running tests (this is for JUnit 5)
    useJUnitPlatform()

    // Ensure JaCoCo agent is attached to the test execution
    finalizedBy jacocoTestReport
}
